/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.api.att.audiorecorder;

import java.io.File;
import java.io.IOException;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;

import android.media.MediaRecorder;


@Kroll.module(name="Attaudiorecorder", id="ti.api.att.audiorecorder")
public class AttaudiorecorderModule extends KrollModule {
	
	@Kroll.constant public static final int OUTPUT_FORMAT_DEFAULT = MediaRecorder.OutputFormat.DEFAULT;
	@Kroll.constant public static final int OUTPUT_FORMAT_RAW_AMR = MediaRecorder.OutputFormat.RAW_AMR;
	@Kroll.constant public static final int OUTPUT_FORMAT_THREE_GPP = MediaRecorder.OutputFormat.THREE_GPP;
	@Kroll.constant public static final int OUTPUT_FORMAT_MPEG_4 = MediaRecorder.OutputFormat.MPEG_4;
	
	@Kroll.constant public static final int AUDIO_ENCODER_DEFAULT = MediaRecorder.AudioEncoder.DEFAULT;
	@Kroll.constant public static final int AUDIO_ENCODER_AMR_NB = MediaRecorder.AudioEncoder.AMR_NB;
	
	private static final String FILE_PROTOCOL = "file://";
	
	// Standard Debugging variables
	private static final String LCAT = "AttrecorderModule";
	
	private MediaRecorder recorder;
	private String filePath;
	private int outputFormat;
	private int audioEncoder;
	
	
	public AttaudiorecorderModule() {
		super();
		filePath = null;
		outputFormat = OUTPUT_FORMAT_DEFAULT;
		audioEncoder = AUDIO_ENCODER_DEFAULT;
	}
	
	@Kroll.getProperty @Kroll.method
	public boolean getRecording() {
		return recorder != null;
	}
	
	@Kroll.getProperty @Kroll.method
	public int getOutputFormat() {
		return outputFormat;
	}
	@Kroll.setProperty @Kroll.method
	public void setOutputFormat(int outputFormat) {
		this.outputFormat =  outputFormat;
	}
	
	@Kroll.getProperty @Kroll.method
	public int getAudioEncoder() {
		return audioEncoder;
	}
	@Kroll.setProperty @Kroll.method
	public void setAudioEncoder(int audioEncoder) {
		this.audioEncoder =  audioEncoder;
	}
	
	@Kroll.getProperty @Kroll.method
	public String getFilePath() {
		return filePath;
	}
	@Kroll.setProperty @Kroll.method
	public void setFilePath(String filePath) {
		this.filePath =  filePath;
	}
	
	@Kroll.method
	public void start() throws IllegalStateException, IOException {
		Log.d(LCAT, "Started audio recording");
		
		if(getRecording()) {
			throw new IllegalStateException("A recording is already in progress");
		}
		
		String state = android.os.Environment.getExternalStorageState();
	    if(!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
	        throw new IOException("SD Card is not mounted.  It is " + state + ".");
	    }
	    
	    
	    // make sure the directory we plan to store the recording in exists
	    String strippedFilePath = (filePath != null && filePath.indexOf(FILE_PROTOCOL) == 0) ?
	    		filePath.substring(FILE_PROTOCOL.length()) : filePath;
		
	    File recordingFileFolder = (new File(strippedFilePath)).getParentFile();
	    
	    if (!recordingFileFolder.exists() && !recordingFileFolder.mkdirs()) {
	    	throw new IOException("Path to file could not be created.");
	    }
	    
	    recorder = new MediaRecorder();
	    
	    recorder.reset();
	    
	    try {
		    recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
		    recorder.setOutputFormat(outputFormat);
		    recorder.setAudioEncoder(audioEncoder);
		    recorder.setOutputFile(strippedFilePath);
		    recorder.prepare();
		    
		    recorder.start();
	    } catch(IllegalStateException e) {
	    	recorder = null;
	    	throw e;
	    } catch(IOException e) {
	    	recorder = null;
	    	throw e;
	    }
	}
	
	@Kroll.method
	public String stop() {
		Log.d(LCAT, "Stopped audio recording");
		
		recorder.stop();
	    recorder.release();
	    recorder = null;
	    
		return getFilePath();
	}
}

